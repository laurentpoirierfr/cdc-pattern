version: "3"

services:
  zookeeper:
    image: debezium/zookeeper:1.6
    container_name: zookeeper
    ports:
      - 2181:2181

  kafka:
    image: debezium/kafka:1.6
    container_name: kafka
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${HOST_IP}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    hostname: kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-latest}
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  postgres:
    build:
      context: postgres
      dockerfile: Dockerfile
    #image: postgres
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"  # Pour debezium

  postgres-connector:
    image: debezium/connect:1.6
    container_name: postgres-debezium
    ports:
      - 9090:8083
    links:
      - kafka
    depends_on:
      - kafka
      - postgres
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=pg
      - CONFIG_STORAGE_TOPIC=pg_connect_configs
      - OFFSET_STORAGE_TOPIC=pg_connect_offsets
      - STATUS_STORAGE_TOPIC=pg_connect_statuses

  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    restart: unless-stopped
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8085"
    ports:
      - 8080:8080
    links:
      - kafka
      - schema-registry

  # =========================================================================================================
  # Migration du redpanda
  # =========================================================================================================
  # redpanda:
  #   image: docker.redpanda.com/vectorized/redpanda:latest
  #   container_name: redpanda-1
  #   command:
  #   - redpanda
  #   - start
  #   - --smp
  #   - '1'
  #   - --reserve-memory
  #   - 0M
  #   - --overprovisioned
  #   - --node-id
  #   - '0'
  #   - --kafka-addr
  #   - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
  #   - --advertise-kafka-addr
  #   - PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
  #   - --pandaproxy-addr
  #   - PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
  #   - --advertise-pandaproxy-addr
  #   - PLAINTEXT://redpanda:28082,OUTSIDE://localhost:8082
  #   ports:
  #   - 8081:8081
  #   - 8082:8082
  #   - 9092:9092
  #   - 28082:28082
  #   - 29092:29092

  # console:
  #   image: docker.redpanda.com/redpandadata/console:latest
  #   restart: on-failure
  #   entrypoint: /bin/sh
  #   command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
  #   environment:
  #     CONFIG_FILEPATH: /tmp/config.yml
  #     CONSOLE_CONFIG_FILE: |
  #       kafka:
  #         brokers: ["redpanda:29092"]
  #         schemaRegistry:
  #           enabled: true
  #           urls: ["http://redpanda:8081"]
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - redpanda